<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
		which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
		There has to be one entity for each item to be referenced. 
		An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2629 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC3236 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3236.xml">
<!ENTITY RFC3864 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3864.xml">
<!ENTITY RFC3870 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3870.xml">
<!ENTITY RFC5234 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5234.xml">
<!ENTITY RFC8288 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8288.xml">
<!ENTITY RFC6839 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6839.xml">
<!ENTITY RFC6906 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6906.xml">
<!ENTITY RFC7230 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7230.xml">
<!ENTITY RFC7231 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7231.xml">
<!ENTITY RFC7240 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7240.xml">

]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
		please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
		(Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
		(using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="std" docName="draft-svensson-accept-profile-00" ipr="trust200902">
	<!-- ***** FRONT MATTER ***** -->

	<front>
		<!-- The abbreviated title is used in the page header - it is only necessary if the 
				full title is longer than 39 characters -->

		<title>Negotiating Profiles in HTTP</title>

		<author fullname="Lars G. Svensson" initials="L.G.S."
				surname="Svensson">
			<organization>Deutsche Nationalbibliothek</organization>
			<address>
				<postal>
					<street>Adickesallee 1</street>
					<code>60322</code>
					<city>Frankfurt</city>
					<region/>
					<country>Germany</country>
				</postal>
				<phone>+49 69 1525 1752</phone>
				<email>l.svensson@dnb.de</email>
			</address>
		</author>

		<author fullname="Ruben Verborgh" initials="R.V."
				surname="Verborgh">
			<organization>Ghent University &#8211; imec</organization>
			<address>
				<postal>
					<street>Sint-Pietersnieuwstraat 41</street>
					<code>9000</code>
					<city>Ghent</city>
					<region/>
					<country>Belgium</country>
				</postal>
				<phone>+32 9 331 49 10</phone>
				<email>ruben.verborgh@ugent.be</email>
			</address>
		</author>

		<date year="2017" />

		<!-- Meta-data Declarations -->

		<area>General</area>

		<workgroup>Internet Engineering Task Force</workgroup>

		<!-- WG name at the upperleft corner of the doc,
				IETF is fine for individual submissions.	
	 If this element is not present, the default is "Network Working Group",
				which is used by the RFC Editor as a nod to the history of the IETF. -->

		<keyword>HTTP, Header, Content Negotiation</keyword>

		<abstract>
			<t>This document defines two new HTTP headers
				"Content-Profile" and "Accept-Profile"
				that enable User Agents and servers to indicate and negotiate
				the profile used for representing a specific resource.
				In this context, a profile is a description of
				the structural and/or semantic constraints of a group of documents
				in addition to the syntactical interpretation provided by more generic MIME types.
				Examples of profiles include Dublin Core Application Profiles, XML Schemata, and
				RDF Shape Expressions.
				This document further defines and registers the "profile" parameter
				for the HTTP "Link" header and suggests a best practice for
				the use of the new headers together with the "Link" header
				for the purposes of performing content negotiation
				and pointing clients to alternate representations.</t>
		</abstract>
	</front>

	<middle>
		<section title="Introduction">
			<t>This document defines two new HTTP headers
				that enable User Agents (UAs) and servers to indicate and negotiate
				the profile used for representing a specific resource.
				On the Web, resources are identified with HTTP(S) URIs.
				It can be useful for a server
				to provide multiple representations of a resource
				to accomodate different UAs or use cases.
				When a UA issues a GET request for a specific URI,
				the UA and the server negotiate which of the
				available representations best suit the UA's needs and capabilities.
				Typically, a UA specifies preferences by setting appropriate HTTP
				headers, e.g., "Accept" for media type, "Accept-Language" for content language,
				or "Accept-Charset" for character encoding.</t>
			<section title="Motivation">
				<t>In many cases, there are several ways to describe a resource
					within the scope of a media type.
					In the case of XML documents, for instance, the same content can be encoded
					using one of several DTDs or XML Schemas.
					JSON documents similarly leave open a wide range of options
					regarding which tree structure, keys, and value types to use.
					In RDF, there is a wide choice of vocabularies available
					to describe resources of the same kind.
					However, when a UA initiates a request, e.g., a GET request to retrieve
					or a PUT request to create or replace a resource, neither the UA nor the
					server have any possibility to exchange information on how the transmitted
					resource is or needs to be formatted precisely beyond the media type.
					This document therefore proposes a solution by
					defining the HTTP headers "Content-Profile" and "Accept-Profile".</t>
			</section>
			<section title="Terminology">
				<t>In the context of this proposal, a profile is a description of
					the structural and/or semantic constraints of a group of documents.
					Examples of a profile in this context include, but are not limited to,
					Dublin Core application profiles
					(formally expressed in <xref target="DSP">Description Set Profiles (DSP)</xref>),
					<xref target="XSD">XML Schema documents</xref>,
					and RDF Shapes expressed in <xref target="SHACL">SHACL</xref>.
					Profiles can, but do not need to, be independent of a media type.
					The definition and usage of profiles in applications
					is beyond the scope of this proposal;
					our only constraint is that a profile can be identified by a URI.
					Typical use cases include validation,
					and building clients that rely on additonal assumptions
					in a representation received from another system.
					These assumptions, such as the presence of a certain structure or certain fields,
					are currently often implicitly made, or documented out of band,
					whereas profiles can explicitly capture them.
					The choice of the term "profile" was derived from the term "Application Profile",
					which the Dublin Core community defines as "schemas which consist of data
					elements drawn from one or more namespaces, combined together by implementors,
					and optimised for a particular local application" <xref target="rachelandheery">[Rachel &amp; Heery]</xref>.
				</t>
			</section>
			<section title="High-level overview of solution">
				<t>The proposed solution introduces two new HTTP header fields:
					"Content-Profile" and "Accept-Profile".
					With "Content-Profile", a sender of a message can indicate
					the profile(s) to which it knows the enclosed representation conforms.
					With "Accept-Profile", a potential recipient of a message can indicate
					its preference for receiving representations that conform to (a) certain profile(s).
					An agent can specify several profiles and use quality indicators (q-values) to indicate preferences.</t>
				<t>A server that supports profiles can then list
					one or more profiles in the "Content-Profile" header in its response
				  specifying the profile or profiles the returned payload conforms to.
					The specified list of profiles may not be exhaustive
					since the returned content can conform to profiles that the server is not aware of.
					If multiple representations of the same resource are available,
					and those conform to different profiles,
					the server can use a "Link" header field together with the "profile" attribute
					to point an agent to those other representations.</t>
				<t>Similarily, an agent sending information to a server,
					e.g., by using PUT or POST, can include a "Content-Profile" header field in the HTTP request
					to state which profile or profiles the request payload conforms to.
					Prior to that interaction,
					the target server can include an "Accept-Profile" header field in a response
					to indicate which profiles the resource is willing to accept in payloads from
					PUT/POST/PATCH requests.</t>
				<t>Note that this information is specific to the current request;
					the set of supported profiles might be different for other resources on the same server
					and/or could change over time.</t>
				<t>The absence of an "Accept-Profile" header field in an HTTP response
					SHOULD be taken as an indication that the server
					does not support profiles for the given resource.
					It MUST NOT be seen as an indication that the server can handle payloads
					conforming to any profile.</t>
				<t>A server that fails a request due to an unsupported profile SHOULD respond with a 415 status
					and SHOULD include an "Accept-Profile" header in its response,
					allowing clients to distinguish between issues related to profiles and media types.
					In order to avoid confusion with issues related to media types,
					servers that fail a request with a 415 status for reasons unrelated to profiles
					MUST NOT include the "Accept-Profile" header field.
				</t>
			</section>
			<section title="Notational Conventions">
				<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
					"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
					document are to be interpreted as described in <xref
							target="RFC2119">RFC 2119</xref>.</t>
			</section>
		</section>

		<section title="Related HTTP Headers">
			<section title="Content-Type">
				<t>
					The <xref target="RFC7231">"Content-Type" HTTP header</xref>
					is used to indicate the media type of a representation.
					This header allows receipients to determine appropriate processing
					for a received message body, such as the parser they need to use.
					A "Content-Type" field value contains a MIME type,
					such as "text/html" or "application/json,"
					and can optionally have parameters,
					such as "charset".
				</t>
				<t>
					In many current interactions,
					senders of HTTP messages underspecify the MIME type of their messages.
					They opt for common, generic media types
					such as "text/xml" or "application/json,"
					whereas the contents of their messages
					actually implicitly conform to stricter assumptions.
					These assumptions are communicated out of band
					and then silently (if at all) implemented by recipients.
					Because those assunptions are not specified explicitly,
					clients cannot discover them at runtime
					to adjust their processing accordingly.
					Minting new media types is possible,
					but this loses the formal relationship
					with the generic media type,
					which would need to be specified out of band.
				</t>
				<t>
					The <xref target="RFC6906">"profile" parameter</xref>
					can be used in the "Content-Type" field in addition to a MIME type
					to indicate a media-type-specific profile the representation conforms to.
					Such profiles are often defined
					within the specification of document formats.
					For instance, <xref target="AS2">Activity Streams 2.0</xref>
					defines the following equivalent media types:
					<figure>
						<artwork>
application/activity+json

application/ld+json; profile="https://www.w3.org/ns/activitystreams"
						</artwork>
					</figure>
					On the one hand,
					this example shows the usage of the profile parameter
					to increase the specificity of an existing media type.
					On the other hand,
					it reveals the limitations of MIME types:
					"application/activity+json" by itself
					does not inform clients without prior knowledge of this media type
					that the message body is a JSON document and a JSON-LD document,
					i.e., also necessarily conforms to the "application/json"
					and "application/ld+json" MIME types.
					Clients without built-in support for "application/activity+json"
					only have the <xref target="RFC6839">"+json" suffix</xref>
					as a non-binding suggestion that the content conforms to "application/json",
					and such an indicator does not exist for JSON-LD and most other media types.
					As such, those clients are not informed about their possible ability
					to parse a message body as JSON or JSON-LD.
					Clients that do have support for "application/activity+json"
					will likely need to involve JSON and JSON-LD parsers regardless.
				</t>
				<t>
					The need to mint specific media types for profiles
					becomes a combinatorial issue when
					profiles can apply to multiple media types,
					or when representations can conform to multiple profiles.
					This document introduces a solution by considering profiles
					as an additional, independent dimension in content negotiation.
				</t>
			</section>

			<section title="Accept">
				<t>
					The <xref target="RFC7231">"Accept" header</xref>
					is the counterpart of the "Content-Type" header.
					Whereas "Content-Type" indicates the option the sender has chosen
					for representing the message body,
					"Accept" communicates the receipient's representation preferences beforehand.
				</t>
				<t>
					The value of an "Accept" header field is a comma-separated list of MIME types,
					each of which can optionally have parameters.
					The "q" parameter is a number between 0.0 and 1.0
					indicating the degree of preference for that MIME type.
					Analogously to the "Content-Type" field,
					the <xref target="RFC6906">"profile" parameter</xref>
					can be used to indicate a preference for a media-type-specific profile.
				</t>
			</section>

			<section title="Content-Location">
				<t>
					The <xref target="RFC7231">"Content-Location" header</xref>
					can be used to provide an identifier
					for the specific representation of a resource
					that is enclosed in the message body.
					For example, when a user agent issues the following request
					for /some/resource:
					<figure>
						<artwork align="left">
GET /some/resource HTTP/1.1
Accept: application/ld+json;
        profile="https://www.w3.org/ns/activitystreams"
						</artwork>
					</figure>
					The server might reply with:
					<figure>
						<artwork align="left">
HTTP/1.1 200 OK
Content-Type: application/ld+json;
              profile="https://www.w3.org/ns/activitystreams"
Content-Location: /some/resource.as.jsonld
						</artwork>
					</figure>
					This then indicates that this specific representation
					is available directly, without content negotiation,
					from /some/resource.as.jsonld.
				</t>
			</section>

			<section title="Link">
				<t>
					The <xref target="RFC8288">"Link" header</xref>
					allows the sender of a message to model additional relationships
					from the represented resource to others.
					Such relations are expressed as a link to a target
					with a relation type and, optionally, target attributes.
					Of particular interest for content negotiation
					are the self and alternate relation types,
					whose targets identify respectively the current representation
					and other existing representations.
					The "Link" header can thereby serve as a mechanism
					for discovering supported representations and profiles.
					The <xref target="RFC6906">"profile" relation type</xref>
					can be used to relate a representation to a profile to which it conforms.
				</t>
				<t>
					The "self" relation type overlaps with the functionality
					provided by the Content-Location field,
					and they will likely use the same identifier.
					The "alternate" relation essentially provides Content-Location functionality
					for other available representations.
					Finally, the "profile" relation type
					mimics the "profile" parameter in the "Content-Type" field,
					except that conformance of a representation to multiple profiles
					could be expressed through multiple "profile" links,
					whereas "Content-Type" only accepts one "profile" parameter.
				</t>
			</section>
		</section>

		<section title="New http Headers">
			<t>The "Accept-Profile" and "Content-Profile" header fields can be sent by both
				the UA and the server. The "Accept-Profile" header is used to specify
				one or more profiles the Agent can accept,
				whereas the "Content-Profile" header tells the other Agent 
				which profile or profiles the payload of the message conforms to.
				So can a UA issuing a request for a resource specify that
				it prefers persons to be described using foaf, but that the BBC Core ontology 
				is also acceptable, and that it can only accept text/turtle, by setting the "Accept" and "Accept-Profile"
				header fields appropriately.
				When the server answers, it would set the "Content-Type" and "Content-Profile" header fields.
				Likewise, a UA sending an XML document to a server
				would set	the "Content-Type" and the "Content-Profile" header fields.
				If the server cannot process the specified profile,
				it would answer with an http 406 status code and possibly a list of acceptable profiles.</t>
			<t>The "Accept-Profile" and "Content-Profile" header fields
				do not contain the actual profile but instead points to it using a URI.
				As long as the URI 	is only used to denote the profile,
				it does not need to point to an	actual document but can be considered opaque.
				If the parties involved agree on a profile definition,
				the profile can be identified with e. g. a URN or an info-URI.
				When a protocol-based URI is used, such as an FTP- or an HTTP-URI	is used, however,
				it is RECOMMENDED that it dereference to a document
				containing the profile definition. 
			</t>
			<section title="Accept-Profile Header Syntax">
				<t>The "Accept-Profile" header field is used to specify one or more
					content profiles the issuing agent can accept for processing.
					Each profile is identified by a URI reference inside angle brackets ("&lt;&gt;").
					URI references MUST be absolute URIs.
					If several profiles are specified,
					quality values as defined in <xref target="RFC7230">Section 5.3.1 of RFC 7230</xref>
					can be used to assign a relative "weight" to the preference.
					Exactly how that weight is used to determine the best representation
					is beyond the scope of this specification.</t>
				<t>A request without any "Accept-Profile" header field implies that the user agent
					will accept content conforming to any profile.
					If the header field is present in a request
					and the origin server cannot provide a representation
					that conforms to the specified profile,
					it can either honor the header field by sending a 406 (Not	Acceptable) response
					or disregard the header field by treating the	response as if it is not subject to content negotiation.
					If the the origin server chooses to disregard the header field 
					and the profile the content conforms to is known,
					the origin server SHOULD send an "AcceptProfile" header
					indicating that profile	together with the payload.</t>
				<t>An agent that wants to indicate that several profiles are acceptable,
					can either submit one Accept-Profile field for every profile that is acceptable
					(possibly specifying q-values for each profile URI)
					or it can decide to combine all profile-URIs into a comma-separated list
					and send that list in a single Accept-Profile field.
					A recipient MUST treat a list of profile URIs in a single Accept-Profile field
					and multiple Accept-Profile fields as equivalent as specified in
					<xref target="RFC7230">Section 3.2.2 of RFC 7230</xref>.</t>
				<t><xref target="abnf_accept_profile"/> describes the syntax (Augmented Backus-Naur Form)
					of the Accept-Profile header fields,
					using the grammar defined in <xref target="RFC5234">RFC 5234</xref> and the rules
					defined in <xref target="RFC7230">Section 3.2 of RFC 7230</xref>.
					The definitions of "URI-reference" and "weight" are imported from
					<xref target="RFC7230">RFC 7230</xref> and <xref target="RFC7231">RFC 7231</xref>,
					respectively.</t>

				<figure align="center" anchor="abnf_accept_profile">
				<preamble>Accept-Profile header syntax</preamble>
					<artwork align="left" type="abnf">
Accept-Profile = "Accept-Profile" ":" (profile-value) *("," profile-value)
profile-value =  "&lt;" URI-reference "&gt;" [weight] 
					</artwork>
				</figure>
			</section>
			<section title="Content-Profile Header Syntax">
				<t>The "Content-Profile" header field is used to specify a profile the payload in the
					message conforms to.
					The profile is identified by a URI reference that MUST be an absolute URI.
					If a user agent uses the "Accept-Profile" header
					to specify one or more profiles it is willing to accept
					and a server does not use the "Content-Profile"	header to
					specify which profile the returned content conforms to, 
					the user agent MAY process the returned content as it deems fit.</t>
				<t>The Content-Profile field MAY contain a comma-separated list of profile-URIs.
					In that case the recipient SHOULD interpret this as if the payload of the message
				  conforms to all of the profiles identified by the supplied profile URIs.
				  Instead of sending a comma-separated list of profile URIs in the Content-Profile header field,
					and agent MAY choose to send each profile URI in its own Content-Profile header field.
					Receivers MUST treat those two variants as equal.</t>
				<t>If a user agent uses the "Content-Profile" header field
					to indicate the profile the	payload conforms to
					(e. g. in an HTTP POST or PUT request)
					and the	server cannot process content conforming to that profile,
					the	server SHOULD send a 406 (Not acceptable) response
					together with an "Accept-Profile"	header field (including q-values)
					to indicate which profiles it can process.</t>
				<t><xref target="abnf_content_profile"/> describes the syntax (Augmented Backus-Naur Form) of the
					header fields, using the grammar defined in <xref target="RFC5234">RFC 5234</xref> and the rules
					defined in <xref target="RFC7230">Section 3.2 of RFC 7230</xref>.
					The definition of "URI-reference" is imported from
					<xref target="RFC7230">RFC 7230</xref>.</t>
				<figure align="center" anchor="abnf_content_profile">
				<preamble>Profile header syntax</preamble>
					<artwork align="left" type="abnf">
Content-Profile = "Content-Profile" ":"  "&lt;" URI-reference "&gt;" *("," "&lt;" URI-reference "&gt;")
					</artwork>
				</figure>
			</section>
		</section>
		<section title="Content Negotiation">
			<section title="Mechanisms">
			</section>
			<section title="Examples">
				<t>The following examples highlight the exchange of profile information between a user agent
				and a server. For clarity, the examples only contain minimal information, i. e.
				only the relevant headers are included and message bodies are ignored.
					<figure align="left" anchor="example_1">
						<preamble>A user agent requests an XML document conforming to a specific XML schema.
						The XML schema is identified by "urn:example:schema:e-commerce-payment".</preamble>
						<artwork align="left">
Request:
GET /some-resource HTTP/1.1
Accept: application/xml
Accept-Profile: &lt;urn:example:schema:e-commerce-payment&gt;

Response:
HTTP/1.1 200 OK
Content-Type: application/xml
Profile: &lt;urn:example:schema:e-commerce-payment&gt;
Link: 	rel="self";
		type="application/xml";
		profile="&lt;urn:example:schema:e-commerce-payment&gt;",
		rel="alternate";
		type="application/xml";
		profile="&lt;urn:example:schema:e-commerce-accounting&gt;"
						</artwork>
					</figure>
					<figure align="left" anchor="example_2">
						<preamble>A user agent requests an RDF/XML document conforming to one of
						two RDF Shapes (http://example.com/shapes/shape-1 and http://example.com/shapes/shape-2).
						It uses q-values to express a preference for shape-1, the server, however,
						prefers to deliver in shape-2.</preamble>
					<artwork align="left">
Request:
GET /some-resource HTTP/1.1
Accept: application/rdf+xml
Accept-Profile: &lt;http://example.com/shapes/shape-1&gt;; q=0.8,
               &lt;http://example.com/shapes/shape-2&gt;; q=0.5

Response:
HTTP/1.1 200 OK
Content-Type: application/rdf+xml
Profile: &lt;http://example.com/shapes/shape-2&gt;
Link:	rel="self";
		type="application/rdf+xml";
		profile="&lt;http://example.com/shapes/shape-2&gt;",
		rel="alternate";
		type="application/rdf+xml";
		profile="&lt;http://example.com/shapes/shape-3&gt;"
						</artwork>
					</figure>
					<figure align="left" anchor="example_3">
						<preamble>A user agent PUTs a turtle document conforming to the RDF Shape
						http://example.com/shapes/shape-1. The server answers that it can only process
						documents conforming to http://example.com/shapes/shape-2.</preamble>
						<artwork align="left">
Request:
PUT /some-resource HTTP/1.1
Profile: &lt;http://example.com/shapes/shape-1&gt;

Response:
HTTP/1.1 406 Not acceptable
Content-Type: application/xhtml+xml
Accept-Profile: &lt;http://example.com/shapes/shape-2&gt;
						</artwork>
					</figure>
					<figure align="left" anchor="example_4">
						<preamble>A user agent requests an XML document where the elements in
						namespace urn:example:namespaces:ns1 must conform to XML schema http://example.com/schema/schema-1
						and the elements in namespace urn:example:namespaces:ns2 must conform to XML schema
						http://example.com/schema/schema-2. The server answers that it can supply the document as requested.</preamble>
						<artwork align="left">
Request:
GET /some-resource HTTP/1.1
Accept-Profile: 	&lt;urn:example:namespaces:ns1
				http://example.com/schema/schema-1
				urn:example:namespaces:ns2
				http://example.com/schema/schema-2&gt;

Response:
HTTP/1.1 200 OK
Content-Type: application/xml
Profile: &lt;urn:example:namespaces:ns1
		http://example.com/schema/schema-1
		urn:example:namespaces:ns2
		http://example.com/schema/schema-2&gt;
						</artwork>
					</figure>
				</t>
			</section>
		</section>

		<section anchor="IANA" title="IANA Considerations">
			<t>This specification defines two header field for the Hypertext
				Transfer Protocol (HTTP) that have been registered with the Internet
				Assigned Numbers Authority (IANA) following the "Registration
				Procedures for Message Header Fields" <xref target="RFC3864">RFC 3864</xref>.
				[TO BE REMOVED: This
				registration should take place at the following location:
				http://www.iana.org/assignments/message-headers/message-headers.xhtml]
				Further, it defines a parameter for the "Link" header. There is no registry
				for link-param except for the values listed in <xref target="RFC8288">RFC 8288</xref>
				so the parameter "profile" will be seen as a link-extension.</t>
			<section title="Accept-Profile HTTP Header Registration" anchor="iana_accept_profile">
				<t>The Accept-Profile header should be added to the permanent
					registry of message header fields (see <xref target="RFC3864">RFC 3864</xref>), taking into
					account the guidelines given by HTTP/1.1 <xref target="RFC7231">RFC 7231</xref>".</t>

				<t>Header Field Name: Accept-Profile</t>

				<t>Applicable Protocol: Hypertext Transfer Protocol (HTTP)</t>

				<t>Status: Informational</t>

				<t>Author/Change controller: IETF</t>

				<t>Specification document(s): RFC XXXX</t>

			</section>
			<section title="Content-Profile HTTP Header Registration" anchor="iana_content_profile">
				<t>The Content-Profile header should be added to the permanent
					registry of message header fields (see <xref target="RFC3864">RFC 3864</xref>), taking into
					account the guidelines given by HTTP/1.1 <xref target="RFC7231">RFC 7231</xref>".</t>

				<t>Header Field Name: Content-Profile</t>

				<t>Applicable Protocol: Hypertext Transfer Protocol (HTTP)</t>

				<t>Status: Informational</t>

				<t>Author/Change controller: IETF</t>

				<t>Specification document(s): RFC XXXX</t>
			</section>
		</section>
		<section anchor="Security" title="Security Considerations">
			<t>The Accept-Profile and Content-Profile headers may expose information
				that a User Agent or an origin server would prefer to not publish.
				In such a case, a server can simply stop exposing the header,
				in which case HTTP interactions would be back to the level of standard HTTP
				(i.e., with no indication what profiles
				the	UA or the server prefer and/or can handle).</t>
		</section>
		<section anchor="Acknowledgements" title="Acknowledgements">
			<t>This is the place to have YOUR NAME prominently displayed!</t>
		</section>
		<!-- Possibly a 'Contributors' section ... -->
	</middle>

	<back>
		<references title="Normative References">
			&RFC2119;
			&RFC5234;
			&RFC7230;
			&RFC7231;
		</references>

		<references title="Informative References">
			&RFC3236;
			&RFC3870;
			&RFC3864;
			&RFC8288;
			&RFC6839;
			&RFC6906;
			&RFC7240;
			<reference anchor="DSP" target="http://dublincore.org/documents/dc-dsp/">
				<front>
					<title>Description Set Profiles: A constraint language for Dublin Core Application Profiles</title>

					<author initials="M." surname="Nilsson">
						<organization>KTH</organization>
					</author>

					<date year="2008" />
				</front>
			</reference>
			<reference anchor="AS2"
					target="https://www.w3.org/TR/activitystreams-core/">
				<front>
					<title>Activity Streams 2.0</title>

					<author initials="J. M." surname="Snell">
						<organization>IBM</organization>
					</author>
					<author initials="E." surname="Prodromou">
						<organization>Fuzzy.ai</organization>
					</author>

					<date year="2017" />
				</front>
			</reference>
			<reference anchor="IANAMEDIAREG"
					target="http://www.iana.org/assignments/media-types/">
				<front>
					<title>Media Types</title>

					<author>
						<organization>IANA</organization>
					</author>

					<date year="2015" />
				</front>
			</reference>
			<reference anchor="JSONLD"
					target="http://www.w3.org/TR/json-ld/">
				<front>
					<title>JSON-LD 1.0: A JSON-based Serialization for Linked Data</title>

					<author initials="M." surname="Sporny">
						<organization>Digital Bazaar</organization>
					</author>
					<author initials="G." surname="Kellogg">
						<organization>Kellogg Associates</organization>
					</author>
					<author initials="M." surname="Lanthaler">
						<organization>Graz University of Technology</organization>
					</author>

					<date year="2015" />
				</front>
			</reference>
			<reference anchor="rachelandheery" target="http://www.ariadne.ac.uk/issue25/app-profiles">
				<front>
					<title>Application Profiles: Mixing and Matching Metadata Schemas</title>
					<author initials="R." surname="Heery">
						<organization>UK Office for Library and Information networking (UKOLN), University of Bath</organization>
					</author>
					<author initials="M." surname="Patel">
						<organization>UK Office for Library and Information networking (UKOLN), University of Bath</organization>
					</author>
					<date year="2000"/>
				</front>
			</reference>
			<reference anchor="SHACL" target="http://www.w3.org/TR/shacl/">
				<front>
					<title>Shapes Constraint Language (SHACL): W3C First Public Working Draft 08 October 2015</title>

					<author initials="H." surname="Knublauch">
						<organization>TopQuadrant, Inc.</organization>
					</author>
					<author initials="A." surname="Ryman">
						<organization/>
					</author>

					<date year="2014" />
				</front>
			</reference>
			<reference anchor="TURTLE" target="http://www.w3.org/TR/turtle/">
				<front>
					<title>RDF 1.1 Turtle</title>

					<author initials="E." surname="Prud'hommeaux">
						<organization>W3C</organization>
					</author>
					<author initials="G." surname="Carothers">
						<organization>Lex Machina, Inc.</organization>
					</author>

					<date year="2014" />
				</front>
			</reference>
			<reference anchor="XSD" target="http://www.w3.org/TR/xmlschema-1/">
				<front>
					<title>XML Schema Part 1: Structures Second Edition</title>

					<author initials="H. S." surname="Thompson">
						<organization>University of Edinburgh</organization>
					</author>
					<author initials="D." surname="Beech">
						<organization>Oracle Corporation</organization>
					</author>
					<author initials="M." surname="Maloney">
						<organization>Commerce One</organization>
					</author>
					<author initials="N." surname="Mendelsohn">
						<organization>Lotus Development Corporation</organization>
					</author>

					<date year="2004" />
				</front>
			</reference>
			<reference anchor="XMLBEANS" target="https://xmlbeans.apache.org/">
				<front>
					<title>XMLBeans</title>

					<author>
						<organization>Apache Software Foundation</organization>
					</author>

					<date year="2014" />
				</front>
			</reference>
			<reference anchor="XMLSCHEMA" target="https://www.w3.org/TR/xmlschema11-1/">
				<front>
					<title>W3C XML Schema Definition Language (XSD) 1.1 Part 1: Structures</title>
					<author initials="S." surname="Gao">
						<organization>IBM</organization>
					</author>
					<author initials="C. M." surname="Sperberg-McQueen">
						<organization>Black Mesa Technologies LLC</organization>
					</author>
					<author initials="H. S." surname="Thompson">
						<organization>University of Edinburgh</organization>
					</author>
					<date year="2012"/>
				</front>
			</reference>
		</references>
	</back>
</rfc>
