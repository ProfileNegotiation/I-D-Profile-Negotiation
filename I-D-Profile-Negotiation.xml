<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
		which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
		There has to be one entity for each item to be referenced.
		An alternate method (rfc include) is described in the references. -->

<!ENTITY AS2 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml-w3c/reference.W3C.REC-activitystreams-core-20170523.xml">
<!ENTITY RFC2119 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2629 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC3236 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3236.xml">
<!ENTITY RFC3864 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3864.xml">
<!ENTITY RFC3870 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3870.xml">
<!ENTITY RFC3986 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3986.xml">
<!ENTITY RFC4452 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4452.xml">
<!ENTITY RFC5234 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml">
<!ENTITY RFC6839 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6839.xml">
<!ENTITY RFC6906 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6906.xml">
<!ENTITY RFC7230 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7230.xml">
<!ENTITY RFC7231 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7231.xml">
<!ENTITY RFC7240 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7240.xml">
<!ENTITY RFC8141 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8141.xml">
<!ENTITY RFC8288 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8288.xml">
<!ENTITY SHACL SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml-w3c/reference.W3C.REC-shacl-20170720.xml">
<!ENTITY XSD SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml-w3c/reference.W3C.REC-xmlschema11-1-20120405.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
		please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
		(Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
		(using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="std" docName="draft-svensson-content-profile-00" ipr="trust200902">
	<!-- ***** FRONT MATTER ***** -->

	<front>
		<!-- The abbreviated title is used in the page header - it is only necessary if the
				full title is longer than 39 characters -->

		<title>Indicating and Negotiating Profiles in HTTP</title>

		<author fullname="Lars G. Svensson" initials="L.G.S."
				surname="Svensson">
			<organization>Deutsche Nationalbibliothek</organization>
			<address>
				<postal>
					<street>Adickesallee 1</street>
					<code>60322</code>
					<city>Frankfurt</city>
					<region/>
					<country>Germany</country>
				</postal>
				<phone>+49 69 1525 1752</phone>
				<email>l.svensson@dnb.de</email>
			</address>
		</author>

		<author fullname="Ruben Verborgh" initials="R.V."
				surname="Verborgh">
			<organization>Ghent University &#8211; imec</organization>
			<address>
				<postal>
					<street>Sint-Pietersnieuwstraat 41</street>
					<code>9000</code>
					<city>Ghent</city>
					<region/>
					<country>Belgium</country>
				</postal>
				<phone>+32 9 331 49 10</phone>
				<email>ruben.verborgh@ugent.be</email>
			</address>
		</author>

		<date year="2019" />

		<!-- Meta-data Declarations -->

		<area>General</area>

		<workgroup>Internet Engineering Task Force</workgroup>

		<!-- WG name at the upperleft corner of the doc,
				IETF is fine for individual submissions.
	 If this element is not present, the default is "Network Working Group",
				which is used by the RFC Editor as a nod to the history of the IETF. -->

		<keyword>HTTP, Header, Content Negotiation</keyword>

		<abstract>
			<t>This document defines two new HTTP headers
				"Content-Profile" and "Accept-Profile"
				that enable User Agents and servers to indicate and negotiate
				the profile used for representing a specific resource.
				In this context, a profile is a description of
				the structural and/or semantic constraints of a group of documents
				in addition to the syntactical interpretation provided by more generic MIME types.
				Examples of profiles include Dublin Core Application Profiles, XML Schemata, and
				RDF Shape Expressions.
				This document further defines the "profile" attribute
				for the HTTP "Link" header and suggests a best practice for
				the use of the new headers together with the "Link" header
				for the purposes of performing content negotiation
				and pointing clients to alternate representations.</t>
		</abstract>
	</front>

	<middle>
		<section title="Introduction">
			<t>This document defines two new HTTP headers
				that enable User Agents and servers to indicate and negotiate
				the profile used for representing a specific resource.
				On the Web, resources are identified with HTTP(S) URIs.
				It can be useful for a server
				to provide multiple representations of a resource
				to accommodate different User Agents or use cases.
				When a User Agent issues a GET request for a specific URI,
				the User Agent and the server negotiate which of the
				available representations best suit the User Agent's needs and capabilities.
				Typically, a User Agent specifies preferences by setting appropriate HTTP
				headers, e.g., "Accept" for media type, "Accept-Language" for content language,
				or "Accept-Charset" for character encoding.</t>
			<section title="Motivation">
				<t>In many cases, there are several ways to describe a resource
					within the scope of a media type.
					In the case of XML documents, for instance, the same content can be encoded
					using one of several DTDs or XML Schemas.
					JSON documents similarly leave open a wide range of options
					regarding which tree structure, keys, and value types to use.
					In RDF, there is a wide choice of vocabularies available
					to describe resources of the same kind.
					However, when a User Agent initiates a request, e.g., a GET request to retrieve
					or a PUT request to create or replace a resource, neither the User Agent nor the
					server have any possibility to exchange information on how the transmitted
					resource is or needs to be formatted precisely beyond the media type.
					This document therefore proposes a solution by
					defining the HTTP headers "Content-Profile" and "Accept-Profile".</t>
			</section>
			<section title="Terminology">
				<t>In the context of this proposal, a profile is a description of
					the structural and/or semantic constraints of a group of documents.
					Examples of a profile in this context include, but are not limited to,
					Dublin Core application profiles
					(formally expressed in <xref target="DSP">Description Set Profiles (DSP)</xref>),
					<xref target="W3C.REC-xmlschema11-1-20120405">XML Schema documents</xref>,
					and RDF Shapes expressed in <xref target="W3C.REC-shacl-20170720">SHACL</xref>.
					Profiles can, but do not need to, be independent of a media type.
					The definition and usage of profiles in applications
					is beyond the scope of this proposal;
					our only constraint is that a profiles is identified by a URI.
					Further assumptions about profiles, e. g.
					hierarchies of profiles, inheritance or transitivity,
					are out of this specification's scope.</t>
				<t>Typical use cases for profiles include validation,
					and building clients that rely on additional assumptions
					in a representation received from another system.
					These assumptions, such as the presence of a certain structure or certain fields,
					are currently often implicitly made, or documented out of band,
					whereas profiles can explicitly capture them.
					The choice of the term "profile" was derived from the term "Application Profile",
					which the Dublin Core community defines as "schemas which consist of data
					elements drawn from one or more namespaces, combined together by implementers,
					and optimised for a particular local application" <xref target="HeeryAndPatel"/>.
				</t>
			</section>
			<section title="High-level overview of solution">
				<t>The proposed solution introduces two new HTTP header fields:
					"Content-Profile" and "Accept-Profile".
					With "Content-Profile", a sender of a message can indicate
					the profile(s) to which it knows the enclosed representation conforms.
					With "Accept-Profile", a potential recipient of a message can indicate
					its preference for receiving representations that conform to (a) certain profile(s).
					An agent can specify several profiles and use quality indicators (q-values) to indicate preferences.</t>
				<t>A server that supports profiles can then list
					one or more profiles in the "Content-Profile" header in its response
					specifying the profile or profiles the returned payload conforms to.
					The specified list of profiles may not be exhaustive
					since the returned content can conform to profiles that the server is not aware of.
					If multiple representations of the same resource are available,
					and those conform to different profiles,
					the server can use a "Link" header field together with the "profile" attribute
					to point an agent to those other representations.</t>
				<t>Similarly, an agent sending information to a server,
					e.g., by using PUT or POST, can include a "Content-Profile" header field in the HTTP request
					to state which profile or profiles the request payload conforms to.
					Prior to that interaction,
					the target server can include an "Accept-Profile" header field in a response
					to indicate which profiles the resource is willing to accept in payloads from
					PUT/POST/PATCH requests.</t>
				<t>Note that this information is specific to the current request;
					the set of supported profiles might be different for other resources on the same server
					and/or could change over time.</t>
				<t>The absence of an "Accept-Profile" header field in an HTTP response
					SHOULD be taken as an indication that the server
					does not support profile-based content-negotiation for the given resource.
					It MUST NOT be seen as an indication that the server can handle payloads
					conforming to any profile.</t>
				<t>A server that fails a request due to receiving a payload with an unsupported profile
					SHOULD respond with a 415 status
					and SHOULD include an "Accept-Profile" header in its response,
					allowing clients to distinguish between issues related to profiles and media types.
					In order to avoid confusion with issues related to media types,
					servers that fail a request with a 415 status for reasons unrelated to profiles
					MUST NOT include the "Accept-Profile" header field.
				</t>
			</section>
			<section title="Notational Conventions">
				<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
					"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
					document are to be interpreted as described in <xref
							target="RFC2119">RFC 2119</xref>.</t>
			</section>
		</section>

		<section title="Related HTTP Headers">
			<section title="Content-Type">
				<t>
					The <xref target="RFC7231">"Content-Type" HTTP header</xref>
					is used to indicate the media type of a representation.
					This header allows receipients to determine appropriate processing
					for a received message body, such as the parser they need to use.
					A "Content-Type" field value contains a MIME type,
					such as "text/html" or "application/json,"
					and can optionally have parameters,
					such as "charset".
				</t>
				<t>
					In many current interactions,
					senders of HTTP messages underspecify the MIME type of their messages.
					They opt for common, generic media types
					such as "text/xml" or "application/json,"
					whereas the contents of their messages
					actually implicitly conform to stricter assumptions.
					These assumptions are communicated out of band
					and then silently (if at all) implemented by recipients.
					Because those assumptions are not specified explicitly,
					clients cannot discover them at runtime
					to adjust their processing accordingly.
					Minting new media types is possible,
					but this loses the formal relationship
					with the generic media type,
					which would need to be specified out of band.
				</t>
				<t>
					The <xref target="RFC6906">"profile" parameter</xref>
					can be used in the "Content-Type" field in addition to a MIME type
					to indicate a media-type-specific profile the representation conforms to.
					Such profiles are often defined
					within the specification of document formats.
					For instance, <xref target="W3C.REC-activitystreams-core-20170523">Activity Streams 2.0</xref>
					defines the following equivalent media types:
					<figure>
<artwork>
application/activity+json

application/ld+json; profile="https://www.w3.org/ns/activitystreams"
</artwork>
					</figure>
					On the one hand,
					this example shows the usage of the profile parameter
					to increase the specificity of an existing media type.
					On the other hand,
					it reveals the limitations of MIME types:
					"application/activity+json" by itself
					does not inform clients without prior knowledge of this media type
					that the message body is a JSON document and a JSON-LD document,
					i.e., also necessarily conforms to the "application/json"
					and "application/ld+json" MIME types.
					Clients without built-in support for "application/activity+json"
					only have the <xref target="RFC6839">"+json" suffix</xref>
					as a non-binding suggestion that the content conforms to "application/json",
					and such an indicator does not exist for JSON-LD and most other media types.
					As such, those clients are not informed about their possible ability
					to parse a message body as JSON or JSON-LD.
					Clients that do have support for "application/activity+json"
					will likely need to involve JSON and JSON-LD parsers regardless.
				</t>
				<t>
					The need to mint specific media types for profiles
					becomes a combinatorial issue when
					profiles can apply to multiple media types,
					or when representations can conform to multiple profiles.
					This document introduces a solution by considering profiles
					as an additional, independent dimension in content negotiation.
				</t>
			</section>

			<section title="Accept">
				<t>
					The <xref target="RFC7231">"Accept" header</xref>
					is the counterpart of the "Content-Type" header.
					Whereas "Content-Type" indicates the option the sender has chosen
					for representing the message body,
					"Accept" communicates the recipient's representation preferences beforehand.
				</t>
				<t>
					The value of an "Accept" header field is a comma-separated list of MIME types,
					each of which can optionally have parameters.
					The "q" parameter is a number between 0.0 and 1.0
					indicating the degree of preference for that MIME type.
					Analogously to the "Content-Type" field,
					the <xref target="RFC6906">"profile" parameter</xref>
					can be used to indicate a preference for a media-type-specific profile.
				</t>
			</section>

			<section title="Content-Location">
				<t>
					The <xref target="RFC7231">"Content-Location" header</xref>
					can be used to provide an identifier
					for the specific representation of a resource
					that is enclosed in the message body.
					For example, when a User Agent issues the following request
					for /some/resource:
					<figure>
<artwork align="left">
GET /some/resource HTTP/1.1
Accept: application/ld+json;
        profile="https://www.w3.org/ns/activitystreams"
</artwork>
					</figure>
					The server might reply with:
					<figure>
<artwork align="left">
HTTP/1.1 200 OK
Content-Type: application/ld+json;
              profile="https://www.w3.org/ns/activitystreams"
Content-Location: /some/resource.as.jsonld
</artwork>
					</figure>
					This then indicates that this specific representation
					is available directly, without content negotiation,
					from /some/resource.as.jsonld.
				</t>
			</section>

			<section title="Link">
				<t>
					The <xref target="RFC8288">"Link" header</xref>
					allows the sender of a message to model additional relationships
					from the represented resource to others.
					Such relations are expressed as a link to a target
					with a relation type and, optionally, target attributes.
					Of particular interest for content negotiation
					are the self and alternate relation types,
					whose targets identify respectively the current representation
					and other existing representations.
					The "Link" header can thereby serve as a mechanism
					for discovering supported representations and profiles.
					The <xref target="RFC6906">"profile" relation type</xref>
					can be used to relate a representation to a profile to which it conforms.
				</t>
				<t>
					The "self" relation type overlaps with the functionality
					provided by the Content-Location field,
					and they will likely use the same identifier.
					The "alternate" relation essentially provides Content-Location functionality
					for other available representations.
					Finally, the "profile" relation type
					mimics the "profile" parameter in the "Content-Type" field,
					except that conformance of a representation to multiple profiles
					could be expressed through multiple "profile" links,
					whereas "Content-Type" only accepts one "profile" parameter.
				</t>
			</section>
		</section>

		<section title="New HTTP Headers">
			<t>The "Content-Profile" and "Accept-Profile" header fields can be sent by both
				the User Agent and the server.
				The "Content-Profile" header tells the other Agent
				which profile or profiles the payload of the message conforms to,
				whereas the "Accept-Profile" header is used to specify
				one or more profiles the Agent can accept.
				For example, a User Agent issuing a request for a resource can specify
				through the "Accept" header that it accepts representations with either
				text/turtle or application/ld+json as MIME type,
				and through the "Accept-Profile" header that
				it prefers people to be described using the FOAF vocabulary,
				but that the BBC Core ontology is also acceptable.
				When the server answers, it would set the "Content-Type"
				and "Content-Profile" header fields appropriately.
				Likewise, a User Agent sending an XML document with a specific structure to a server
				would set	the "Content-Type" and the "Content-Profile" header fields.
				If the server cannot process the specified profile,
				it would answer with an HTTP 415 status code and possibly a list of acceptable profiles.</t>
			<t>The "Accept-Profile" and "Content-Profile" header fields
				do not contain the actual profile but instead point to it using its URI.
				As long as the URI	is only used to denote the profile,
				it does not need to point to an	actual document but can be considered opaque.
				If the parties involved agree on a profile definition,
				the profile can be identified with e.g. a <xref target="RFC8141">URN</xref>
				or an <xref target="RFC4452">info-URI</xref>.
				When a protocol-based URI is used, such as an FTP- or an HTTP-URI, however,
				it is RECOMMENDED that it dereference to a document
				containing that profile's definition.
			</t>
			<section title="Content-Profile Header Syntax">
				<t>The "Content-Profile" header field is used to specify
					one or more profiles the payload in the message conforms to.
					Each profile is identified by a URI reference inside angle brackets ("&lt;&gt;")
					that MUST be an absolute URI.
					If a server does not use the "Content-Profile" header to
					specify which profile(s) the returned content conforms to,
					the User Agent SHOULD NOT make any assumptions about the representation
					beyond what is specified by the media type indicated in the "Content-Type" header.</t>
				<t>The "Content-Profile" field MAY contain a comma-separated list of profile URIs.
					In that case, the recipient SHOULD interpret this as an indication that
					the payload of the message conforms to all of the profiles
					identified by the supplied profile URIs.
				  Differences in ordering of the items in this list,
					or the presence of duplicates,
					MUST NOT be interpreted as semantically significant.
				  Instead of sending a comma-separated list of profile URIs in one "Content-Profile" header field,
					and agent MAY choose to send each profile URI in its own "Content-Profile" header field
					without changing its meaning,
					as specified in <xref target="RFC7230">Section 3.2.2 of RFC 7230</xref>.</t>
				<t>If a User Agent uses the "Content-Profile" header field
					to indicate the profile the	payload conforms to
					(e.g., in an HTTP POST or PUT request)
					and the	server can only process content in other profiles,
					the	server SHOULD respond with a 415 status code
					together with an "Accept-Profile"	header field (including q-values)
					to indicate which profiles it supports.</t>
				<t><xref target="abnf_content_profile"/> describes the syntax (Augmented Backus-Naur Form) of the
					header field, using the grammar defined in <xref target="RFC5234">RFC 5234</xref> and the rules
					defined in <xref target="RFC7230">Section 3.2 of RFC 7230</xref>.
					The definition of "URI-reference" is imported from
					<xref target="RFC7230">RFC 7230</xref>.</t>
				<figure align="center" anchor="abnf_content_profile">
				<preamble>Profile header syntax</preamble>
<artwork align="left" type="abnf">
Content-Profile = "Content-Profile" ":"
                OWS "&lt;" URI-reference "&gt;"
                *(OWS "," OWS "&lt;" URI-reference "&gt;") OWS
</artwork>
				</figure>
			</section>
			<section title="Accept-Profile Header Syntax">
				<t>The "Accept-Profile" header field is used to specify one or more
					content profiles the issuing agent can accept for processing.
					Each profile is identified by a URI reference inside angle brackets ("&lt;&gt;")
					that MUST be an absolute URI.
					If multiple profiles are specified,
					quality values as defined in <xref target="RFC7230">Section 5.3.1 of RFC 7230</xref>
					can be used to assign a relative "weight" to the preference.
					Exactly how that weight is used to determine the best representation
					is beyond the scope of this specification.</t>
				<t>A request without "Accept-Profile" header field
					SHOULD indicate that the recipient
					accepts content conforming to any profile.
					If the header field is present in a User Agent request
					and the server cannot provide a representation
					that conforms to the specified profile,
					it SHOULD either honor the header field by responding with a 406 (Not Acceptable) status code,
					or disregard the header field by treating the	response as if it is not subject to content negotiation.
					If the server does not support profile-based content negotiation,
					the latter behavior SHOULD also be followed.
					Regardless of the outcomes of the negotiation process,
					if the server knows that the representation conforms to one of more profiles,
					it SHOULD list then in the "Content-Profile" header of the response.</t>
				<t>The absence of an "Accept-Profile" header field in an HTTP response
					SHOULD be taken as an indication
					that the server does not support profiles for the given resource.
					It MUST NOT be seen as an indication
					that the server can handle payloads conforming to any profile.</t>
				<t>An agent that wants to indicate that several profiles are acceptable,
					can either submit one Accept-Profile field for every profile that is acceptable
					(possibly specifying q-values for each profile URI)
					or it can decide to combine all profile URIs into a comma-separated list
					and send that list in a single Accept-Profile field.
				  Differences in ordering of the items in this list,
					or the presence of duplicates,
					MUST NOT be interpreted as semantically significant.
				  Instead of sending a comma-separated list of profile URIs in one "Accept-Profile" header field,
					and agent MAY choose to send each profile URI in its own "Content-Profile" header field
					without changing its meaning,
					as specified in <xref target="RFC7230">Section 3.2.2 of RFC 7230</xref>.</t>
				<t><xref target="abnf_accept_profile"/> describes the syntax (Augmented Backus-Naur Form)
					of the Accept-Profile header fields,
					using the grammar defined in <xref target="RFC5234">RFC 5234</xref> and the rules
					defined in <xref target="RFC7230">Section 3.2 of RFC 7230</xref>.
					The definitions of "URI-reference" and "weight" are imported from
					<xref target="RFC7230">RFC 7230</xref> and <xref target="RFC7231">RFC 7231</xref>,
					respectively.</t>

				<figure align="center" anchor="abnf_accept_profile">
				<preamble>Accept-Profile header syntax</preamble>
<artwork align="left" type="abnf">
Accept-Profile = "Accept-Profile" ":"
               OWS (profile-value) *(OWS "," OWS profile-value) OWS
profile-value = "&lt;" URI-reference "&gt;" [weight]
</artwork>
				</figure>
			</section>
		</section>
		<section title="Content Negotiation">
			<section title="Mechanisms">
				<t>User Agents and servers supporting profiles
					can agree on mutually acceptable profiles for the payload
					through the content negotiation processes described in
					<xref target="RFC7231">Section 3.4 of RFC 7231</xref>.
					The present document does not define or alter content negotiation,
					but rather adds an additional dimension to the content negotiation process.
					Agents can indicate their preferences for certain profiles
					by specifying an "Accept-Profile" header on requests,
					and servers indicate their choice
					by specifying a "Content-Profile" header on responses.
					Both proactive negotiation and reactive negotiation for profiles
					can be supported by servers.</t>
				<t>Although servers are free to implement negotiation as they see fit,
					if the User Agent sends an "Accept-Profile" header,
					they SHOULD consider representations not conforming to any of the listed profiles
					as non-interpretable by the client.
					This means that a representation that conforms to a listed profile,
					but has a low preference score on other dimensions,
					SHOULD be considered as more desired
					than a representation with a higher preference score on other dimensions
					but that does not conform to any listed profile.
					If no "Accept-Profile" header preference is given,
					the profile dimension SHOULD be ignored for negotiation purposes.
					Nonetheless, in all cases, the server's response
					SHOULD contain a "Content-Profile" header
					listing the URIs of all profiles to which it knows the representation conforms.</t>
				<t>A server that fails a request due to receiving a payload with an unsupported profile
					SHOULD respond with a 415 status and
					SHOULD include an "Accept-Profile" header in its response,
					allowing clients to distinguish between issues related to profiles and media types.
					In order to avoid confusion with issues related to media types,
					servers that fail a request with a 415 status for reasons unrelated to profiles
					MUST NOT include the "Accept-Profile" header field.</t>
				<t></t>
			</section>
			<section title="Examples">
				<t>The following examples show possible exchanges of profile information between a User Agent
				and a server. For clarity, the examples only contain minimal information, i.e.,
				only the relevant headers are included and message bodies are ignored.

					<figure align="left" anchor="example_server_indicates_profiles">
						<preamble>
							In this first example,
							a User Agent requests a JSON representation.
							The server returns a JSON representation,
							and indicates that it conforms to additional structural constraints
							as specified in a profile identified by "urn:example:schema:e-commerce-payment".
							Based on this information,
							the client can choose to use a JSON parser,
							and can rely on additional assumptions
							about the structure and semantics of the resulting JSON tree.
						</preamble>
<artwork align="left">
Request:

  GET /document HTTP/1.1
  Accept: application/json

Response:

  HTTP/1.1 200 OK
  Content-Type: application/json
  Content-Profile: &lt;urn:example:schema:e-commerce-payment&gt;

</artwork>
					</figure>

					<figure align="left" anchor="example_both_support_profiles">
						<preamble>
							Another User Agent requests a JSON representation conforming to additional constraints,
							as specified in a profile identified by "urn:example:schema:e-commerce-payment".
							The server has such a representation of the resource available,
							as well as an XML representation conforming to the same profile,
							and another JSON representation conforming to a different profile.
						</preamble>
<artwork align="left">
Request:
  GET /document HTTP/1.1
  Accept: application/json
  Accept-Profile: &lt;urn:example:schema:e-commerce-payment&gt;

Response:
  HTTP/1.1 200 OK
  Content-Type: application/json
  Content-Profile: &lt;urn:example:schema:e-commerce-payment&gt;
  Link: rel="self";
          type="application/json";
          profile="urn:example:schema:e-commerce-payment",
        rel="alternate";
          type="application/xml";
          profile="urn:example:schema:e-commerce-payment;",
        rel="alternate";
          type="application/json";
          profile="urn:example:schema:e-commerce-accounting"
</artwork>
					</figure>

					<figure align="left" anchor="example_server_prefers_other">
						<preamble>
							A User Agent requests an RDF document conforming to one of two RDF Shapes.
							It uses q-values to express a preference for shape-1.
							The server, however, prefers to deliver in shape-2,
							and the response also happens to conform to shape-3.
						</preamble>
<artwork align="left">
Request:
  GET /document HTTP/1.1
  Accept: text/turtle, application/rdf+xml
  Accept-Profile: &lt;http://example.com/shapes/shape-1&gt;;q=0.8,
                  &lt;http://example.com/shapes/shape-2&gt;;q=0.5

Response:
  HTTP/1.1 200 OK
  Content-Type: text/turtle
  Content-Profile: &lt;http://example.com/shapes/shape-2&gt;,
                   &lt;http://example.com/shapes/shape-3&gt;
  Link: rel="self";
          type="text/turtle";
          profile="http://example.com/shapes/shape-2
                   http://example.com/shapes/shape-3",
        rel="alternate";
          type="text/turtle";
          profile="http://example.com/shapes/shape-4"
</artwork>
					</figure>

					<figure align="left" anchor="example_406">
						<preamble>
							A User Agent requests an RDF document conforming to one of two RDF Shapes.
							The server, however, does not support these profiles.
						</preamble>
<artwork align="left">
Request:
  GET /document HTTP/1.1
  Accept: text/turtle, application/rdf+xml
  Accept-Profile: &lt;http://example.com/shapes/shape-1&gt;;q=0.8,
                  &lt;http://example.com/shapes/shape-2&gt;;q=0.5

Response:
  HTTP/1.1 406 Not Acceptable
  Content-Type: text/html
  Link: rel="alternate";
          type="text/turtle";
          profile="http://example.com/shapes/shape-4"
</artwork>
					</figure>

					<figure align="left" anchor="example_415">
						<preamble>
							A User Agent PUTs an RDF document conforming to the RDF Shape
							identified by http://example.com/shapes/shape-1.
							The server answers that it can only process
							documents conforming to http://example.com/shapes/shape-2.
							The User Agent knows the problem is caused by the profile,
							because the "Accept-Profile" header is listed.
						</preamble>
<artwork align="left">
Request:
  PUT /document HTTP/1.1
  Content-Type: text/turtle
  Content-Profile: &lt;http://example.com/shapes/shape-1&gt;

Response:
  HTTP/1.1 415 Unsupported Media Type
  Content-Type: text/html
  Accept-Profile: &lt;http://example.com/shapes/shape-2&gt;
</artwork>
					</figure>
				</t>
			</section>
		</section>

		<section anchor="IANA" title="IANA Considerations">
			<t>This specification defines two header field for the Hypertext
				Transfer Protocol (HTTP) that have been registered with the Internet
				Assigned Numbers Authority (IANA) following the "Registration
				Procedures for Message Header Fields" <xref target="RFC3864">RFC 3864</xref>.
				[TO BE REMOVED: This
				registration should take place at the following location:
				http://www.iana.org/assignments/message-headers/message-headers.xhtml]
				Further, it defines an attribute for the "Link" header. There is no registry
				for "link-param" except for the values listed in <xref target="RFC8288">RFC 8288</xref>
				so the attribute "profile" will be seen as a link-extension.</t>
			<section title="Accept-Profile HTTP Header Registration" anchor="iana_accept_profile">
				<t>The Accept-Profile header should be added to the permanent
					registry of message header fields (see <xref target="RFC3864">RFC 3864</xref>), taking into
					account the guidelines given by HTTP/1.1 <xref target="RFC7231">RFC 7231</xref>.</t>

				<t>Header Field Name: Accept-Profile</t>

				<t>Applicable Protocol: Hypertext Transfer Protocol (HTTP)</t>

				<t>Status: Informational</t>

				<t>Author/Change controller: IETF</t>

				<t>Specification document(s): RFC XXXX</t>

			</section>
			<section title="Content-Profile HTTP Header Registration" anchor="iana_content_profile">
				<t>The Content-Profile header should be added to the permanent
					registry of message header fields (see <xref target="RFC3864">RFC 3864</xref>), taking into
					account the guidelines given by HTTP/1.1 <xref target="RFC7231">RFC 7231</xref>.</t>

				<t>Header Field Name: Content-Profile</t>

				<t>Applicable Protocol: Hypertext Transfer Protocol (HTTP)</t>

				<t>Status: Informational</t>

				<t>Author/Change controller: IETF</t>

				<t>Specification document(s): RFC XXXX</t>
			</section>
		</section>
		<section anchor="defn-profileTarget" title="Definition of the Link header target attribute &quot;profile&quot;">
			<t>When used in a <xref target="RFC8288">Link header field</xref>,
				the "profile" attribute is a hint indicating which profile
				the resource representation retrieved by dereferencing the link
				conforms to.
				Note that this is only a hint;
				for example it does not override the "Content-Profile" header field
				of a HTTP response obtained by actually following the link.
				Multiple "profile" attributes on a single link value
				indicate that the resource representation conforms to multiple profiles.</t>
			<figure align="left">
				<preamble>The ABNF for the profile attribute's value is:</preamble>
<artwork align="left">
absolute-URI
</artwork>
				<postamble>where "absolute-URI" is defined as in section 4.3 of <xref target="RFC3986">RFC 3986</xref>.</postamble>
			</figure>
		</section>
		<section anchor="Security" title="Security Considerations">
			<t>The use of HTTP to negotiate and transport profile information
				implies that all privacy and security issues that are relevant for that protocol
				are also relevant for profile negotiation.
				E. g., information such as user agent, accept-headers, IP address etc.
				can potentially be used as identifying information,
				and particularly, the IP address adds information about geolocation and institutional membership.
				Further, offering a list of acceptable profiles at the beginning of a negotiation process
				can reveal information about the user's interests
				that could be used to add such information to a user profile.
				If this is undesirable, a client and/or a server can stop exposing the header,
				in which case HTTP interactions would be back to the level of standard HTTP
				(i.e., with no indication what profiles
				the	User Agent or the server prefer and/or can handle).</t>
		</section>
		<section anchor="Acknowledgements" title="Acknowledgements">
			<t>This is the place to have YOUR NAME prominently displayed!</t>
		</section>
		<!-- Possibly a 'Contributors' section ... -->
	</middle>

	<back>
		<references title="Normative References">
			&RFC2119;
			&RFC3986;
			&RFC5234;
			&RFC7230;
			&RFC7231;
		</references>

		<references title="Informative References">
			&AS2;
			&RFC3864;
			&RFC4452;
			&RFC6839;
			&RFC6906;
			&RFC8141;
			&RFC8288;
			&SHACL;
			&XSD;
			<reference anchor="DSP" target="http://dublincore.org/documents/dc-dsp/">
				<front>
					<title>Description Set Profiles: A constraint language for Dublin Core Application Profiles</title>

					<author initials="M." surname="Nilsson">
						<organization>KTH</organization>
					</author>

					<date year="2008" />
				</front>
			</reference>
			<reference anchor="HeeryAndPatel" target="http://www.ariadne.ac.uk/issue25/app-profiles">
				<front>
					<title>Application Profiles: Mixing and Matching Metadata Schemas</title>
					<author initials="R." surname="Heery">
						<organization>UK Office for Library and Information networking (UKOLN), University of Bath</organization>
					</author>
					<author initials="M." surname="Patel">
						<organization>UK Office for Library and Information networking (UKOLN), University of Bath</organization>
					</author>
					<date year="2000"/>
				</front>
			</reference>
		</references>
	</back>
</rfc>
